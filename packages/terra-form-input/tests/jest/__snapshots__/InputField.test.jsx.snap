// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InputField correctly applies the theme context className 1`] = `
<ThemeContextProvider
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <InputField
    disabled={false}
    error={null}
    errorIcon={
      <IconError
        viewBox="0 0 48 48"
        xmlns="http://www.w3.org/2000/svg"
      />
    }
    help={null}
    hideRequired={false}
    inputAttrs={Object {}}
    inputId="test-input"
    isIncomplete={false}
    isInline={false}
    isInvalid={false}
    isLabelHidden={false}
    label="Label"
    labelAttrs={Object {}}
    required={false}
    showOptional={false}
  >
    <Field
      error={null}
      errorIcon={
        <IconError
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      }
      help={null}
      hideRequired={false}
      htmlFor="test-input"
      isInline={false}
      isInvalid={false}
      isLabelHidden={false}
      label="Label"
      labelAttrs={Object {}}
      required={false}
      showOptional={false}
    >
      <div
        className="field orion-fusion-theme"
      >
        <div
          className="label-group"
        >
          <label
            className="label"
            htmlFor="test-input"
          >
            Label
          </label>
          <div
            className="error-icon-hidden"
          >
            <IconError
              viewBox="0 0 48 48"
              xmlns="http://www.w3.org/2000/svg"
            >
              <IconBase
                ariaLabel={null}
                className="IconError"
                focusable="false"
                height="1em"
                isBidi={false}
                isSpin={false}
                viewBox="0 0 48 48"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <svg
                  aria-hidden="true"
                  className="tui-Icon icon IconError"
                  focusable="false"
                  height="1em"
                  viewBox="0 0 48 48"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M24 0c13.3 0 24 10.7 24 24S37.3 48 24 48 0 37.3 0 24C0 10.8 10.7 0 23.9 0h.1z"
                    fill="#E50000"
                  />
                  <path
                    d="M7 21.5h34v5H7v-5z"
                    fill="#FFF"
                  />
                </svg>
              </IconBase>
            </IconError>
          </div>
        </div>
        <Input
          disabled={false}
          id="test-input"
          isIncomplete={false}
          isInvalid={false}
          key=".0"
          name={null}
          required={false}
        >
          <input
            className="form-input orion-fusion-theme"
            disabled={false}
            id="test-input"
            name={null}
            required={false}
          />
        </Input>
      </div>
    </Field>
  </InputField>
</ThemeContextProvider>
`;

exports[`InputField should render a InputField with props 1`] = `
<Field
  error="Text"
  errorIcon={
    <IconHelp
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help="Help"
  hideRequired={true}
  htmlFor="test-input"
  isInline={true}
  isInvalid={true}
  isLabelHidden={true}
  label="Label Test"
  labelAttrs={
    Object {
      "className": "label",
    }
  }
  required={false}
  showOptional={true}
>
  <Input
    aria-describedby="test-input-error test-input-help"
    defaultValue="Value"
    disabled={false}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name="test"
    onChange={[Function]}
    refCallback={[Function]}
    required={false}
    type="number"
    value="Value"
  />
</Field>
`;

exports[`InputField should render a InputField with type specified by type attribute when both type attribute and InputAttributes are given 1`] = `
<Field
  error="Text"
  errorIcon={
    <IconHelp
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help="Help"
  hideRequired={true}
  htmlFor="test-input"
  isInline={true}
  isInvalid={true}
  isLabelHidden={true}
  label="Label Test"
  labelAttrs={
    Object {
      "className": "label",
    }
  }
  required={false}
  showOptional={true}
>
  <Input
    aria-describedby="test-input-error test-input-help"
    defaultValue="Value"
    disabled={false}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name="test"
    onChange={[Function]}
    refCallback={[Function]}
    required={false}
    type="Text"
    value="Value"
  />
</Field>
`;

exports[`InputField should render a InputField with type specified through InputAttributes 1`] = `
<Field
  error="Text"
  errorIcon={
    <IconHelp
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help="Help"
  hideRequired={true}
  htmlFor="test-input"
  isInline={true}
  isInvalid={true}
  isLabelHidden={true}
  label="Label Test"
  labelAttrs={
    Object {
      "className": "label",
    }
  }
  required={false}
  showOptional={true}
>
  <Input
    aria-describedby="test-input-error test-input-help"
    defaultValue="Value"
    disabled={false}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name="test"
    onChange={[Function]}
    refCallback={[Function]}
    required={false}
    type="number"
    value="Value"
  />
</Field>
`;

exports[`InputField should render a default InputField component 1`] = `
<Field
  error={null}
  errorIcon={
    <IconError
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help={null}
  hideRequired={false}
  htmlFor="test-input"
  isInline={false}
  isInvalid={false}
  isLabelHidden={false}
  label="Label"
  labelAttrs={Object {}}
  required={false}
  showOptional={false}
>
  <Input
    disabled={false}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name={null}
    required={false}
  />
</Field>
`;

exports[`InputField should render a disabled InputField component 1`] = `
<Field
  error={null}
  errorIcon={
    <IconError
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help={null}
  hideRequired={false}
  htmlFor="test-input"
  isInline={false}
  isInvalid={false}
  isLabelHidden={false}
  label="Label"
  labelAttrs={Object {}}
  required={false}
  showOptional={false}
>
  <Input
    disabled={true}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name={null}
    required={false}
  />
</Field>
`;

exports[`InputField should render a disabled InputField component via inputAttrs 1`] = `
<Field
  error={null}
  errorIcon={
    <IconError
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help={null}
  hideRequired={false}
  htmlFor="test-input"
  isInline={false}
  isInvalid={false}
  isLabelHidden={false}
  label="Label"
  labelAttrs={Object {}}
  required={false}
  showOptional={false}
>
  <Input
    disabled={true}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name={null}
    required={false}
  />
</Field>
`;

exports[`InputField should render a placeholder within the InputField component 1`] = `
<Field
  error={null}
  errorIcon={
    <IconError
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help={null}
  hideRequired={false}
  htmlFor="test-input"
  isInline={false}
  isInvalid={false}
  isLabelHidden={false}
  label="Label"
  labelAttrs={Object {}}
  required={false}
  showOptional={false}
>
  <Input
    disabled={false}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name={null}
    placeholder="Placeholder"
    required={false}
  />
</Field>
`;

exports[`InputField should render a placeholder within the InputField component when passed as an input attribute 1`] = `
<Field
  error={null}
  errorIcon={
    <IconError
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help={null}
  hideRequired={false}
  htmlFor="test-input"
  isInline={false}
  isInvalid={false}
  isLabelHidden={false}
  label="Label"
  labelAttrs={Object {}}
  required={false}
  showOptional={false}
>
  <Input
    disabled={false}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name={null}
    placeholder="Placeholder"
    required={false}
  />
</Field>
`;

exports[`InputField should render a valid InputField with props 1`] = `
<Field
  error="Text"
  errorIcon={
    <IconHelp
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  help="Help"
  hideRequired={true}
  htmlFor="test-input"
  isInline={true}
  isInvalid={false}
  isLabelHidden={true}
  label="Label Test"
  labelAttrs={
    Object {
      "className": "label",
    }
  }
  required={false}
  showOptional={true}
>
  <Input
    aria-describedby="test-input-help"
    defaultValue="Value"
    disabled={false}
    id="test-input"
    isIncomplete={false}
    isInvalid={false}
    name="test"
    onChange={[Function]}
    refCallback={[Function]}
    required={false}
    type="number"
    value="Value"
  />
</Field>
`;
